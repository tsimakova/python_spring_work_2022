
import socket

# Создаем сокет.

sock = socket.socket()

# Связываем сокет с хостом и портом с помощью метода bind, которому передается кортеж: хост и порт.
# Насчет хоста — мы оставим строку пустой, чтобы наш сервер был доступен для всех интерфейсов.
# А порт возьмем любой от нуля до 65535.
# Следует отметить, что в большинстве операционных систем прослушивание портов с номерами 0 — 1023 требует особых привилегий.
# Я выбрал порт 9090.

sock.bind(('', 9090))

# С помощью метода listen мы запустим для данного сокета режим прослушивания.
# Метод принимает один аргумент — максимальное количество подключений в очереди.
# Вспомним про зал с окошками. Так вот этот параметр определяет размер очереди.
# Если он установлен в единицу, а кто-то, явно лишний, пытается еще подстроится сзади, то его пошлют.

sock.listen(1)

# Теперь мы можем принять подключение с помощью метода accept,
# который возвращает кортеж с двумя элементами: новый сокет и адрес клиента.
# Именно этот сокет и будет использоваться для приема и посылке клиенту данных.

conn, addr = sock.accept()

# Теперь мы установили с клиентом связь и можем с ним «общаться».
# Т.к. мы не можем точно знать, что и в каких объемах клиент нам пошлет,
# то мы будем получать данные от него небольшими порциями.
# Чтобы получить данные нужно воспользоваться методом recv,
# который в качестве аргумента принимает количество байт для чтения.
# Мы будем читать порциями по 1024 байт (или 1 кб).
# Для общения с клиентом мы используем сокет, который получили в результате выполнения метода accept.
# Мы в бесконечном цикле принимаем 1024 байт данных с помощью метода recv.
# Если данных больше нет, то этот метод ничего не возвращает.
# Таким образом мы можем получать от клиента любое количество данных.
# Дальше в нашем примере для наглядности мы что-то сделаем с полученными данными и отправим их обратно клиенту.
# Например, с помощью метода upper у строк вернем клиенту строку в верхнем регистре.

while True:
    data = conn.recv(1024)
    if not data:
        break
    conn.send(data.upper())

# Теперь можно и закрыть соединение.
conn.close()

#file = open("D:\PYTHON_course\\test.jpeg", "rb")
#print(file.read())